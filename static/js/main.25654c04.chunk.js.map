{"version":3,"sources":["reducers/matrix.reducers.js","actions/actionTypes.js","Matrix/Cell.js","actions/matrix.actions.js","selectors/index.js","Matrix/index.js","store/index.js","reducers/index.js","reportWebVitals.js","index.js"],"names":["getRowsSums","matrixObject","Object","fromEntries","entries","map","reduce","el","acc","getColumnAverage","column","Math","trunc","length","getColumnsAverages","matrixArray","columnSums","arrayLength","i","average","valuesArray","push","updateColumnsAverages","columnsAverages","updatedColumnIndex","newCaolumnAverage","columnsAveragesCopy","getLastMatrixIndex","matrix","keys","Number","getUpdatedObjectWithNewValue","object","newIndex","newValue","objectClone","JSON","parse","stringify","getUpdatedObjectWithourRow","index","getUpdatedMatrixWithNewCellValue","rowIndex","colIndex","increment","matrixClone","initialState","rowsSums","matrixReducer","updatedMatrix","state","action","type","actionTypes","values","payload","newRowIndex","updatedRowsSums","INITIAL_ADD_MATRIX","UPDATE_MATRIX_CELL","ADD_ROW","DELETE_ROW","Cell","value","cellIndex","highlighted","withBackground","updateCell","onMouseOver","onMouseOut","cellAttributes","className","undefined","style","width","mapDispatchToProps","updateMatrixCellAction","protoTypes","PropTypes","number","func","connect","matrixSelector","rowsSumsSelector","columnsAveragesSelector","StyledBtn","styled","button","StyledDeleteBtn","StyledAddBtn","generateMatrixRow","N","Array","fill","from","to","random","getRandomNumber","initialAddMatrix","initialAddMatrixAction","addRow","rowValues","newRowValues","deleteRow","deleteRowAction","M","X","useState","warnings","setWarnings","nearest","setNearest","percentagesRow","setPercentagesRow","useEffect","generateMatrix","errors","error","onDataCellHover","cellData","nearestsVals","currentValue","nextVal","prevVal","arr","Set","flat","sort","currentValIndex","indexOf","nearests","abs","Infinity","findXNearest","onDataCellLeave","e","onSumCellLeave","onClick","warning","rowData","includes","sum","data","onSumCellHover","createStore","require","default","devToolsEnhancer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initData","StyledMatrix","Matrix","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.25654c04.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\n\n\nconst getRowsSums = (matrixObject) => Object.fromEntries(Object.entries(matrixObject)\n    .map(([index, valuesArray]) => [index, valuesArray.reduce((el, acc) => el + acc, 0)]));\n\n\nconst getColumnAverage = (column) => {\n  return Math.trunc(column.reduce((el, acc) => el + acc, 0) / column.length)\n}\n\nconst getColumnsAverages = (matrixArray) => {\n  const columnSums = [];\n  const arrayLength = matrixArray[0].length;\n  \n  for (let i = 0; i < arrayLength; i++) {\n    const average = getColumnAverage(matrixArray.map((valuesArray) => valuesArray[i]))\n    columnSums.push(average);\n  }\n\n  return columnSums;\n}\n\nconst updateColumnsAverages = (matrixArray, columnsAverages, updatedColumnIndex) => {\n  const newCaolumnAverage = getColumnAverage(matrixArray.map((valuesArray) => valuesArray[updatedColumnIndex]));\n  const columnsAveragesCopy = [...columnsAverages];\n  columnsAveragesCopy[updatedColumnIndex] = newCaolumnAverage;\n\n  return columnsAveragesCopy;\n}\n\nconst getLastMatrixIndex = (matrix) => {\n  const keys = Object.keys(matrix);\n\n  return Number(keys[keys.length - 1]);\n}\n\nconst getUpdatedObjectWithNewValue = (object, newIndex, newValue) => {\n  const objectClone = JSON.parse(JSON.stringify(object));\n  objectClone[newIndex] = newValue; \n\n  return objectClone;\n}\n\nconst getUpdatedObjectWithourRow = (object, index) => {\n  const objectClone = JSON.parse(JSON.stringify(object));\n  delete objectClone[index];\n\n  return objectClone;\n}\n\nconst getUpdatedMatrixWithNewCellValue = (matrix, {rowIndex, colIndex, increment}) => {\n  const matrixClone = JSON.parse(JSON.stringify(matrix));\n  matrixClone[rowIndex][colIndex] += increment;\n\n  return matrixClone;\n}\n\nconst initialState = {\n  matrix: {},\n  rowsSums: {},\n  columnsAverages: [],\n}\n\nconst matrixReducer = (state = initialState, action) => {\n  let updatedMatrix;\n  switch (action.type) {\n    case actionTypes.INITIAL_ADD_MATRIX:\n      const matrixArray = Object.values(action.payload);\n      return { \n        ...state,\n        matrix: action.payload,\n        rowsSums: getRowsSums(matrixArray),\n        columnsAverages: getColumnsAverages(matrixArray)\n      };\n    case actionTypes.ADD_ROW:\n      const newRowIndex = getLastMatrixIndex(state.matrix) + 1;\n      updatedMatrix = getUpdatedObjectWithNewValue(state.matrix, newRowIndex, action.payload);\n\n      return {\n        ...state,\n        matrix: getUpdatedObjectWithNewValue(state.matrix, newRowIndex, action.payload),\n        rowsSums: getUpdatedObjectWithNewValue(state.rowsSums, newRowIndex, action.payload.reduce((el, acc) => el + acc, 0)),\n        columnsAverages: getColumnsAverages(Object.values(updatedMatrix)),\n      }\n    case actionTypes.DELETE_ROW:\n      updatedMatrix = getUpdatedObjectWithourRow(state.matrix, action.payload);\n      const updatedRowsSums = getUpdatedObjectWithourRow(state.rowsSums, action.payload);\n\n      return {\n        ...state,\n        matrix: updatedMatrix,\n        rowsSums: updatedRowsSums,\n        columnsAverages: getColumnsAverages(Object.values(updatedMatrix)),\n      }\n    case actionTypes.UPDATE_MATRIX_CELL:\n      updatedMatrix = getUpdatedMatrixWithNewCellValue(state.matrix, {...action.payload});\n\n      return {\n        ...state,\n        matrix: updatedMatrix,\n        rowsSums: { ...state.rowsSums, [action.payload.rowIndex]: state.rowsSums[action.payload.rowIndex] + 1},\n        columnsAverages: updateColumnsAverages(Object.values(updatedMatrix), state.columnsAverages, action.payload.colIndex),\n      }\n    default: return state;\n  }\n}\n\nexport default matrixReducer;","export const INITIAL_ADD_MATRIX = 'INITIAL_ADD_MATRIX';\nexport const UPDATE_MATRIX_CELL = 'UPDATE_MATRIX';\nexport const ADD_ROW = 'ADD_ROW';\nexport const DELETE_ROW = 'DELETE_ROW';\n\nexport const INITIAL_ADD_SUMS = 'INITIAL_ADD_SUMS';\nexport const UPDATE_SUMS = 'UPDATE_SUMS';\nexport const ADD_SUM = 'ADD_SUM';\nexport const DELETE_SUM = 'DELETE_SUM';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\n\nimport {updateMatrixCellAction} from '../actions';\n\n\nconst Cell = ({value, rowIndex, cellIndex, highlighted, withBackground, updateCell, onMouseOver, onMouseOut}) => {\n  const cellClass = highlighted ? \"matrix__cell highlighted\" :\n    withBackground ? \"matrix__cell with-background\" : \"matrix__cell\";\n\n  const cellAttributes = {\n    className: cellClass,\n  }\n\n  if (rowIndex !== undefined && cellIndex !== undefined) {\n    cellAttributes['data-cell'] = `${rowIndex}-${cellIndex}`;\n    cellAttributes['onClick'] = () => updateCell(rowIndex, cellIndex, 1);\n  }\n\n  if (onMouseOver) {\n    cellAttributes['onMouseOver'] = onMouseOver;\n  }\n\n  if (onMouseOut) {\n    cellAttributes['onMouseOut'] = onMouseOut;\n  }\n\n  return (\n    <div {...cellAttributes}>\n      {withBackground && <span className='matrix__cell-deco' style={{width: `${value}%`}}></span>}\n      {value}\n    </div>)\n}\n\nconst mapDispatchToProps = {\n  updateCell: (rowIndex, colIndex, value) => updateMatrixCellAction(rowIndex, colIndex, value)\n}\n\nCell.protoTypes = {\n  value: PropTypes.number,\n  rowIndex: PropTypes.number,\n  cellIndex: PropTypes.number,\n  updateCell: PropTypes.func,\n}\n\nexport default connect(null, mapDispatchToProps)(Cell);","import * as actionTypes from './actionTypes';\n\n\nexport const initialAddMatrixAction = (matrix) => ({\n  type: actionTypes.INITIAL_ADD_MATRIX,\n  payload: matrix\n});\n\nexport const updateMatrixCellAction = (rowIndex, colIndex, increment) => ({\n  type: actionTypes.UPDATE_MATRIX_CELL,\n  payload: {\n    rowIndex,\n    colIndex,\n    increment\n  }\n});\n\nexport const addRowAction = (newRowValues) => ({\n  type: actionTypes.ADD_ROW,\n  payload: newRowValues\n});\n\nexport const deleteRowAction = (rowIndex) => ({\n  type: actionTypes.DELETE_ROW,\n  payload: rowIndex\n});\n\n\n","export const matrixSelector = (state) => state.matrix;\nexport const rowsSumsSelector = (state) => state.rowsSums;\nexport const columnsAveragesSelector = (state) => state.columnsAverages;","import React, {useState, useEffect, useMemo} from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport Cell from './Cell';\nimport {initialAddMatrixAction, addRowAction, deleteRowAction} from '../actions';\nimport {matrixSelector, rowsSumsSelector, columnsAveragesSelector} from '../selectors';\n\n\nconst StyledBtn = styled.button`\n  border-width: 1px;\n  border-radius: 4px;\n  cursor: pointer;\n`\n\nconst StyledDeleteBtn = styled(StyledBtn)`\n  background-color: lightcoral;\n`\n\nconst StyledAddBtn = styled(StyledBtn)`\n  display: block;\n  width: 200px;\n  height: 30px;\n  margin: 30px auto 30px;\n  background-color: lightblue;\n`\n\nconst getRandomNumber = (from = 100, to = 999) => Math.trunc(from + Math.random() * (to - from));\n\nconst generateMatrixRow = (N) => new Array(N).fill(0).map(el => getRandomNumber())\n\nconst generateMatrix = (M, N) => {\n\n  const matrixObject = {}\n\n  for (let i = 0; i < M; i++) {\n    matrixObject[i] = generateMatrixRow(N)\n  }\n  \n  return matrixObject;\n}\n\nconst findXNearest = (matrixArray, currentValue, X) => {\n  const arr = [...new Set(matrixArray.flat())].sort();\n\n  const currentValIndex = arr.indexOf(currentValue);\n  const nearests = [];\n\n  let nextVal;\n  let prevVal;\n  for (let i = 0; i < X + 1; i++) {\n    if (!nextVal) {\n      nextVal = arr[currentValIndex + i] ?\n        Math.abs(arr[currentValIndex + i] - arr[currentValIndex]) :\n        Infinity\n    }\n\n    if (!prevVal) {\n      prevVal = arr[currentValIndex - i] ?\n        Math.abs(arr[currentValIndex - i] - arr[currentValIndex]) :\n        Infinity\n    }\n\n    if (prevVal > nextVal) {\n      nearests.push(arr[currentValIndex + i]);\n      nextVal = null;\n      continue;\n    }\n\n    nearests.push(arr[currentValIndex - i]);\n    prevVal = null;\n  }\n\n  return nearests;\n}\n\nconst Matrix = ({M, N, X, matrix, rowsSums, columnsAverages, initialAddMatrix, addRow, deleteRow, updateCell, className}) => {\n  const [warnings, setWarnings] = useState([]);\n  const [nearest, setNearest] = useState([]);\n  const [percentagesRow, setPercentagesRow] = useState({})\n\n  // Pass init data\n  useEffect( () => { M && N && initialAddMatrix(generateMatrix(M, N)) }, [] );\n\n  if (!M || !N) {\n    const errors = [];\n\n    !M && errors.push('Missing matrix rows');\n    !N && errors.push('Missing matrix columns');\n\n    return (\n      <div className='errors'>\n        {errors.map(error => <div className='errors__item'>{error}</div>)}\n      </div>\n    );\n  }\n  \n  if (warnings.length === 0 && !X) {\n    setWarnings(['Missing amount of nearest values'])\n  }\n\n  const onDataCellHover = (cellData) => {\n    const nearestsVals = findXNearest(Object.values(matrix), cellData, X);\n    setNearest(nearestsVals);\n  }\n\n  const onDataCellLeave = (e) => {\n    setNearest([]);\n  }\n\n  const onSumCellHover = (rowIndex, sum) => {\n    const rowValues =  matrix[rowIndex];\n    setPercentagesRow({\n      [rowIndex]: rowValues.map(data => Math.trunc((data / sum) * 100))\n    });\n  }\n\n  const onSumCellLeave = () => {\n    setPercentagesRow({});\n  } \n\n  return (\n    <div>\n      <StyledAddBtn onClick={() => addRow(generateMatrixRow(N))}>Add new row</StyledAddBtn>\n      <div className={className}>\n        {warnings.length > 0 && <div className='warnings'>{warnings.map(warning => <div className='warnings__item'>{warning}</div>)}</div>}\n        {Object.entries(matrix).map(([rowIndex, rowData]) => (\n          <div key={rowIndex} className=\"matrix__row\">\n            {percentagesRow[rowIndex] ?\n              percentagesRow[rowIndex].map((value, cellIndex) => (\n                <Cell\n                key={cellIndex}\n                value={value}\n                rowIndex={rowIndex}\n                cellIndex={cellIndex}\n                withBackground />\n              )) :\n            \n              rowData.map((value, cellIndex) => (\n                <Cell\n                  key={cellIndex}\n                  value={value}\n                  rowIndex={rowIndex}\n                  cellIndex={cellIndex}\n                  onMouseOver={() => onDataCellHover(value)}\n                  onMouseOut={onDataCellLeave}\n                  highlighted={nearest.includes(value)} />\n              ))\n            }\n            <Cell\n              key={rowIndex}\n              value={rowsSums[rowIndex]}\n              onMouseOver={() => onSumCellHover(rowIndex, rowsSums[rowIndex])}\n              onMouseOut={onSumCellLeave} />\n            <StyledDeleteBtn onClick={() => deleteRow(rowIndex)}>Delete Row</StyledDeleteBtn>\n          </div>\n        ))}\n        <div key={'column-sums'} className=\"matrix__row\">\n          {columnsAverages.map((sum, index) => <Cell key={`column-sum-${index}`} value={sum} />)}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  matrix: matrixSelector(state),\n  rowsSums: rowsSumsSelector(state),\n  columnsAverages: columnsAveragesSelector(state)\n});\n\nconst mapDispatchToProps = {\n  initialAddMatrix: (matrix) => initialAddMatrixAction(matrix),\n  addRow: (rowValues) => addRowAction(rowValues),\n  deleteRow: (rowIndex) => deleteRowAction(rowIndex),\n}\n\n\nMatrix.propTypes = {\n  M: PropTypes.number,\n  N: PropTypes.number,\n  X: PropTypes.number,\n  matrix: PropTypes.object,\n  initialAddMatrix: PropTypes.func,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Matrix);","import { createStore } from 'redux';\nimport { devToolsEnhancer } from 'redux-devtools-extension';\n\nimport {matrixReducer} from '../reducers';\n\n\nexport default createStore(matrixReducer, devToolsEnhancer());","const { default: matrixReducer } = require(\"./matrix.reducers\");\n\nexport {default as matrixReducer} from './matrix.reducers';","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport styled from 'styled-components';\n\nimport Matrix from './Matrix';\nimport store from './store';\n\nimport reportWebVitals from './reportWebVitals';\n\nimport initData from './initData.json';\n\n// try {\n//   (async () => {\n//     initData = await import('./initData.json');\n//   })();\n// } catch {\n//   // Error('missing init data')\n// }\n\nconst {M = 0, N = 0, X = 0} = initData;\n\nconst StyledMatrix = styled(Matrix)`\n  position: relative;\n  display: grid;\n  grid-template-rows: repeat(${initData.M + 1}, 1fr);\n  grid-gap: 20px;\n  max-width: 100vw;\n  max-height: calc(100vh - 120px);\n  overflow: scroll;\n\n  & .matrix__row {\n    display: grid;\n    grid-template-columns: repeat(${initData.N + 2}, 1fr);\n    grid-gap: 20px;\n  }\n\n  & .matrix__cell {\n    min-width: 150px;\n    min-height: 30px;\n    line-height: 30px;\n    text-align: center;\n    border: 1px solid lightgrey;\n    cursor: pointer;\n\n    &.highlighted {\n      background-color: lightgreen;\n    }\n\n    &.with-background {\n      position: relative;\n\n      &::after {\n        content: ' %';\n      }\n\n      & .matrix__cell-deco {\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n        background-color: lightgrey;\n        z-index: -1;\n      }\n    }\n  }\n`\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <StyledMatrix M={M} N={N} X={X} />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}