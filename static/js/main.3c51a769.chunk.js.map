{"version":3,"sources":["actions/actionTypes.js","Matrix/Cell.js","actions/matrix.actions.js","selectors/index.js","Matrix/utils.js","Matrix/index.js","reducers/matrix.reducers.js","store/index.js","reportWebVitals.js","index.js"],"names":["INITIAL_ADD_MATRIX","UPDATE_MATRIX_CELL","ADD_ROW","DELETE_ROW","Cell","value","rowIndex","cellIndex","highlighted","withBackground","updateCell","onMouseOver","onMouseOut","cellAttributes","className","classNames","undefined","style","width","mapDispatchToProps","colIndex","increment","type","actionTypes","payload","updateMatrixCellAction","protoTypes","PropTypes","number","func","connect","matrixSelector","state","matrix","generateMatrixRow","N","Array","fill","map","el","from","to","Math","trunc","random","getRandomNumber","StyledBtn","styled","button","StyledDeleteBtn","StyledAddBtn","initialAddMatrix","initialAddMatrixAction","addRow","rowValues","deleteRow","deleteRowAction","M","X","useState","warnings","setWarnings","nearest","setNearest","percentagesRow","setPercentagesRow","useEffect","matrixObject","i","generateMatrix","errors","push","error","length","onDataCellHover","cellData","nearestsVals","matrixArray","currentValue","nextVal","prevVal","arr","Set","flat","sort","currentValIndex","indexOf","nearests","abs","Infinity","findXNearest","Object","values","warning","onClick","entries","rowData","includes","reduce","acc","e","sum","Number","target","innerText","data","onSumCellHover","index","average","getLastMatrixIndex","keys","getUpdatedObjectWithNewValue","object","newIndex","newValue","objectClone","JSON","parse","stringify","getUpdatedObjectWithourRow","getUpdatedMatrixWithNewCellValue","matrixClone","initialState","matrixReducer","updatedMatrix","action","newRowIndex","createStore","devToolsEnhancer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initData","StyledMatrix","Matrix","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.3c51a769.chunk.js","sourcesContent":["export const INITIAL_ADD_MATRIX = 'INITIAL_ADD_MATRIX';\nexport const UPDATE_MATRIX_CELL = 'UPDATE_MATRIX';\nexport const ADD_ROW = 'ADD_ROW';\nexport const DELETE_ROW = 'DELETE_ROW';\n\nexport const INITIAL_ADD_SUMS = 'INITIAL_ADD_SUMS';\nexport const UPDATE_SUMS = 'UPDATE_SUMS';\nexport const ADD_SUM = 'ADD_SUM';\nexport const DELETE_SUM = 'DELETE_SUM';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport classNames from 'classnames';\n\n\nimport {updateMatrixCellAction} from '../actions';\n\n\nconst Cell = ({value, rowIndex, cellIndex, highlighted, withBackground, updateCell, onMouseOver, onMouseOut}) => {\n  const cellClass = classNames('matrix__cell', {\n    'highlighted': highlighted,\n    'with-background': withBackground\n  })\n\n  const cellAttributes = {\n    className: cellClass,\n  }\n\n  if (rowIndex !== undefined && cellIndex !== undefined) {\n    cellAttributes['data-cell'] = `${rowIndex}-${cellIndex}`;\n    cellAttributes['onClick'] = () => updateCell(rowIndex, cellIndex, 1);\n  }\n\n  if (onMouseOver) {\n    cellAttributes['onMouseOver'] = onMouseOver;\n  }\n\n  if (onMouseOut) {\n    cellAttributes['onMouseOut'] = onMouseOut;\n  }\n\n  return (\n    <div {...cellAttributes}>\n      {withBackground && <span className='matrix__cell-deco' style={{width: `${value}%`}}></span>}\n      {value}\n    </div>)\n}\n\nconst mapDispatchToProps = {\n  updateCell: (rowIndex, colIndex, value) => updateMatrixCellAction(rowIndex, colIndex, value)\n}\n\nCell.protoTypes = {\n  value: PropTypes.number,\n  rowIndex: PropTypes.number,\n  cellIndex: PropTypes.number,\n  updateCell: PropTypes.func,\n}\n\nexport default connect(null, mapDispatchToProps)(Cell);","import * as actionTypes from './actionTypes';\n\n\nexport const initialAddMatrixAction = (matrix) => ({\n  type: actionTypes.INITIAL_ADD_MATRIX,\n  payload: matrix\n});\n\nexport const updateMatrixCellAction = (rowIndex, colIndex, increment) => ({\n  type: actionTypes.UPDATE_MATRIX_CELL,\n  payload: {\n    rowIndex,\n    colIndex,\n    increment\n  }\n});\n\nexport const addRowAction = (newRowValues) => ({\n  type: actionTypes.ADD_ROW,\n  payload: newRowValues\n});\n\nexport const deleteRowAction = (rowIndex) => ({\n  type: actionTypes.DELETE_ROW,\n  payload: rowIndex\n});\n\n\n","export const matrixSelector = (state) => state.matrix;","const getRandomNumber = (from = 100, to = 999) => Math.trunc(from + Math.random() * (to - from));\n\nexport const generateMatrixRow = (N) => new Array(N).fill(0).map(el => getRandomNumber())\n\nexport const generateMatrix = (M, N) => {\n\n  const matrixObject = {}\n\n  for (let i = 0; i < M; i++) {\n    matrixObject[i] = generateMatrixRow(N)\n  }\n  \n  return matrixObject;\n}\n\nexport const findXNearest = (matrixArray, currentValue, X) => {\n  const arr = [...new Set(matrixArray.flat())].sort();\n\n  const currentValIndex = arr.indexOf(currentValue);\n  const nearests = [];\n\n  let nextVal;\n  let prevVal;\n  for (let i = 0; i < X + 1; i++) {\n    if (!nextVal) {\n      nextVal = arr[currentValIndex + i] ?\n        Math.abs(arr[currentValIndex + i] - arr[currentValIndex]) :\n        Infinity\n    }\n\n    if (!prevVal) {\n      prevVal = arr[currentValIndex - i] ?\n        Math.abs(arr[currentValIndex - i] - arr[currentValIndex]) :\n        Infinity\n    }\n\n    if (prevVal > nextVal) {\n      nearests.push(arr[currentValIndex + i]);\n      nextVal = null;\n      continue;\n    }\n\n    nearests.push(arr[currentValIndex - i]);\n    prevVal = null;\n  }\n\n  return nearests;\n}","import React, {useState, useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport Cell from './Cell';\nimport {initialAddMatrixAction, addRowAction, deleteRowAction} from '../actions';\nimport {matrixSelector} from '../selectors';\nimport {generateMatrix, findXNearest, generateMatrixRow} from './utils';\n\n\nconst StyledBtn = styled.button`\n  border-width: 1px;\n  border-radius: 4px;\n  cursor: pointer;\n`\n\nconst StyledDeleteBtn = styled(StyledBtn)`\n  background-color: lightcoral;\n`\n\nconst StyledAddBtn = styled(StyledBtn)`\n  display: block;\n  width: 200px;\n  height: 30px;\n  margin: 30px auto 30px;\n  background-color: lightblue;\n`\n\nconst Matrix = ({M, N, X, matrix, initialAddMatrix, addRow, deleteRow, className}) => {\n  const [warnings, setWarnings] = useState([]);\n  const [nearest, setNearest] = useState([]);\n  const [percentagesRow, setPercentagesRow] = useState({});\n\n  // Pass init data\n  useEffect( () => { M && N && initialAddMatrix(generateMatrix(M, N)) }, [] );\n\n  if (!M || !N) {\n    const errors = [];\n\n    !M && errors.push('Missing matrix rows');\n    !N && errors.push('Missing matrix columns');\n\n    return (\n      <div className='errors'>\n        {errors.map(error => <div className='errors__item'>{error}</div>)}\n      </div>\n    );\n  }\n  \n  if (warnings.length === 0 && !X) {\n    setWarnings(['Missing amount of nearest values'])\n  }\n\n  const onDataCellHover = (cellData) => {\n    const nearestsVals = findXNearest(Object.values(matrix), cellData, X);\n    setNearest(nearestsVals);\n  }\n\n  const onSumCellHover = (e, rowIndex) => {\n    const sum = Number(e.target.innerText);\n    const rowValues =  matrix[rowIndex];\n    setPercentagesRow({\n      [rowIndex]: rowValues.map(data => Math.trunc((data / sum) * 100))\n    });\n  }\n\n  return (\n    <div>\n      {warnings.length > 0 && <div className='warnings'>{warnings.map(warning => <div className='warnings__item'>{warning}</div>)}</div>}\n      <StyledAddBtn onClick={() => addRow(generateMatrixRow(N))}>Add new row</StyledAddBtn>\n      <div className={className}>\n        {Object.entries(matrix).map(([rowIndex, rowData]) => (\n          <div key={rowIndex} className=\"matrix__row\">\n            {percentagesRow[rowIndex] ?\n              percentagesRow[rowIndex].map((value, cellIndex) => (\n                <Cell\n                key={cellIndex}\n                value={value}\n                rowIndex={rowIndex}\n                cellIndex={cellIndex}\n                withBackground />\n              )) :\n            \n              rowData.map((value, cellIndex) => (\n                <Cell\n                  key={cellIndex}\n                  value={value}\n                  rowIndex={rowIndex}\n                  cellIndex={cellIndex}\n                  onMouseOver={() => onDataCellHover(value)}\n                  onMouseOut={() => setNearest([])}\n                  highlighted={nearest.includes(value)} />\n              ))\n            }\n            <Cell\n              key={rowIndex}\n              value={matrix[rowIndex].reduce((el, acc) => el + acc, 0)}\n              onMouseOver={(e) => onSumCellHover(e, rowIndex)}\n              onMouseOut={() => setPercentagesRow({})} />\n            <StyledDeleteBtn onClick={() => deleteRow(rowIndex)}>Delete Row</StyledDeleteBtn>\n          </div>\n        ))}\n        <div key={'column-sums'} className=\"matrix__row\">\n          {new Array(N)\n            .fill(0)\n            .map((el, index) => {\n              const average = Math.trunc(Object.values(matrix).map((el) => el[index]).reduce((el, acc) => el + acc, 0) / M)\n              return <Cell key={`column-sum-${index}`} value={average} />\n            })\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  matrix: matrixSelector(state),\n});\n\nconst mapDispatchToProps = {\n  initialAddMatrix: (matrix) => initialAddMatrixAction(matrix),\n  addRow: (rowValues) => addRowAction(rowValues),\n  deleteRow: (rowIndex) => deleteRowAction(rowIndex),\n}\n\n\nMatrix.propTypes = {\n  M: PropTypes.number,\n  N: PropTypes.number,\n  X: PropTypes.number,\n  matrix: PropTypes.object,\n  initialAddMatrix: PropTypes.func,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Matrix);","import * as actionTypes from '../actions/actionTypes';\n\nconst getLastMatrixIndex = (matrix) => {\n  const keys = Object.keys(matrix);\n\n  return Number(keys[keys.length - 1]);\n}\n\nconst getUpdatedObjectWithNewValue = (object, newIndex, newValue) => {\n  const objectClone = JSON.parse(JSON.stringify(object));\n  objectClone[newIndex] = newValue; \n\n  return objectClone;\n}\n\nconst getUpdatedObjectWithourRow = (object, index) => {\n  const objectClone = JSON.parse(JSON.stringify(object));\n  delete objectClone[index];\n\n  return objectClone;\n}\n\nconst getUpdatedMatrixWithNewCellValue = (matrix, {rowIndex, colIndex, increment}) => {\n  const matrixClone = JSON.parse(JSON.stringify(matrix));\n  matrixClone[rowIndex][colIndex] += increment;\n\n  return matrixClone;\n}\n\nconst initialState = {\n  matrix: {},\n}\n\nconst matrixReducer = (state = initialState, action) => {\n  let updatedMatrix;\n  switch (action.type) {\n    case actionTypes.INITIAL_ADD_MATRIX: return { ...state, matrix: action.payload };\n    case actionTypes.ADD_ROW:\n      const newRowIndex = getLastMatrixIndex(state.matrix) + 1;\n      updatedMatrix = getUpdatedObjectWithNewValue(state.matrix, newRowIndex, action.payload);\n\n      return { ...state, matrix: getUpdatedObjectWithNewValue(state.matrix, newRowIndex, action.payload) }\n    case actionTypes.DELETE_ROW:\n      updatedMatrix = getUpdatedObjectWithourRow(state.matrix, action.payload);\n\n      return { ...state, matrix: updatedMatrix }\n    case actionTypes.UPDATE_MATRIX_CELL:\n      updatedMatrix = getUpdatedMatrixWithNewCellValue(state.matrix, {...action.payload});\n\n      return { ...state, matrix: updatedMatrix }\n    default: return state;\n  }\n}\n\nexport default matrixReducer;","import { createStore } from 'redux';\nimport { devToolsEnhancer } from 'redux-devtools-extension';\n\nimport {matrixReducer} from '../reducers';\n\n\nexport default createStore(matrixReducer, devToolsEnhancer());","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport styled from 'styled-components';\n\nimport Matrix from './Matrix';\nimport store from './store';\n\nimport reportWebVitals from './reportWebVitals';\n\nimport initData from './initData.json';\n\n// try {\n//   (async () => {\n//     initData = await import('./initData.json');\n//   })();\n// } catch {\n//   // Error('missing init data')\n// }\n\nconst {M = 0, N = 0, X = 0} = initData;\n\nconst StyledMatrix = styled(Matrix)`\n  position: relative;\n  display: grid;\n  grid-template-rows: repeat(${initData.M + 1}, 1fr);\n  grid-gap: 20px;\n  max-width: 100vw;\n  max-height: calc(100vh - 120px);\n  overflow: scroll;\n\n  & .matrix__row {\n    display: grid;\n    grid-template-columns: repeat(${initData.N + 2}, 1fr);\n    grid-gap: 20px;\n  }\n\n  & .matrix__cell {\n    min-width: 150px;\n    min-height: 30px;\n    line-height: 30px;\n    text-align: center;\n    border: 1px solid lightgrey;\n    cursor: pointer;\n\n    &.highlighted {\n      background-color: lightgreen;\n    }\n\n    &.with-background {\n      position: relative;\n\n      &::after {\n        content: ' %';\n      }\n\n      & .matrix__cell-deco {\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n        background-color: lightgrey;\n        z-index: -1;\n      }\n    }\n  }\n`\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <StyledMatrix M={M} N={N} X={X} />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}